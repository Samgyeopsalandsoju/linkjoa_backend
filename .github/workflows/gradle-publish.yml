# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a package using Gradle and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#Publishing-using-gradle

name: Gradle Package

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  S3_BUCKET_NAME: s3-clipvault
  CD_APPLICATION_NAME: codeDeploy-clipVault
  CD_DEPLOYMENT_GROUP: codeDeploy-clipVault-backend

jobs:
  build:
  
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        #server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
        #settings-path: ${{ github.workspace }} # location for the settings.xml file

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

    - name: Run chmod to make gradlew executable
      run: chmod +x ./gradlew
    
    - name: Build with Gradle
      run: ./gradlew build -Dspring.profiles.active=prod

    - name: check File
      run: pwd; ls -al ./; cd ./outputs; ls -al ./;
      
    - name: Make zip file
      run: zip -r ./outputs/clipVault_backend_${{ github.sha }}.zip ./outputs/clipVault_backend.jar
      shell: bash

    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: build-artifact
        path: ./outputs/clipVault_backend_${{ github.sha }}.zip
  
  s3upload:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: build-artifact
        path: ./outputs
        
    - name: configure AWS S3
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: Upload to S3
      run: pwd; ls -al; aws s3 cp --region ap-northeast-2 ./outputs/clipVault_backend_${{ github.sha }}.zip s3://$S3_BUCKET_NAME/backend/clipVault_backend_${{ github.sha }}.zip

  codeDeploy:
    runs-on: ubuntu-latest
    needs: s3upload
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: configure AWS codeDeploy
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}  
        
    - name: Trigger CodeDeploy
      run: |
        aws deploy create-deployment \
          --application-name ${{ env.CD_APPLICATION_NAME}} \
          --deployment-group-name ${{ env.CD_DEPLOYMENT_GROUP }} \
          --s3-location bucket=${{ env.S3_BUCKET_NAME}},key=backend/clipVault_backend_${{ github.sha }}.zip,bundleType=zip
          
    # The USERNAME and TOKEN need to correspond to the credentials environment variables used in
    # the publishing section of your build.gradle
    #- name: Publish to GitHub Packages
    #  run: ./gradlew publish
    #  env:
    #    USERNAME: ${{ github.actor }}
    #    TOKEN: ${{ secrets.GITHUB_TOKEN }}
